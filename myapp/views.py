from django.shortcuts import render, redirect, get_object_or_404
from django.contrib import messages
from django.urls import reverse
from django.contrib.auth.decorators import login_required
from django.contrib.auth import authenticate, login, logout, get_backends
from .models import Car, UserProfile, Location, Booking
from .forms import CarForm, UserForm, CustomUserCreationForm, BookingForm
from django.contrib.auth.models import User
from django.contrib.auth.forms import UserCreationForm
from datetime import datetime
from django.conf import settings
from django.utils.dateparse import parse_date



# ‚úÖ Helper function: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
def is_admin(user):
    return user.is_staff  # Django ‡πÉ‡∏ä‡πâ `is_staff` ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô


# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö (Login)
def login_view(request):
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö next parameter ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏™‡πà‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏¥‡∏î
    """
    if request.method == 'POST':
        print(request.POST)
        username = request.POST.get('username', '').strip()
        password = request.POST.get('password', '').strip()

        if not username or not password:
            messages.error(request, "‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô!")
            return redirect('login')

        user = authenticate(request, username=username, password=password)

        if user is not None:
            login(request, user)
            messages.success(request, "‚úÖ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
            
            # ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå next
            next_url = request.POST.get('next') or request.GET.get('next') or 'home'
            return redirect(next_url)
        else:
            messages.error(request, "‚ùå ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!")

    return render(request, 'myapp/login.html', {'next': request.GET.get('next', '')})


def select_car(request):
    cars = Car.objects.all()
    return render(request, 'select_car.html', {'cars': cars})

def booking_details(request, car_id):
    car = get_object_or_404(Car, id=car_id)
    pickup_date = request.GET.get('pickup_date')
    return_date = request.GET.get('return_date')

    if pickup_date and return_date:
        days = (parse_date(return_date) - parse_date(pickup_date)).days
        total_price = car.price_per_day * days
    else:
        total_price = 0

    return render(request, 'myapp/booking_details.html', {
        'car': car,
        'pickup_date': pickup_date,
        'return_date': return_date,
        'total_price': total_price
    })

def confirm_booking(request):
    if request.method == "POST":
        car_id = request.POST.get("car_id")
        pickup_date = request.POST.get("pickup_date")
        return_date = request.POST.get("return_date")
        total_price = request.POST.get("total_price")

        car = get_object_or_404(Car, id=car_id)

        return render(request, "myapp/confirm_booking.html", {
            "car": car,
            "pickup_date": pickup_date,
            "return_date": return_date,
            "total_price": total_price
        })
    return redirect("home") 

def booking_form(request, car_id):
    car = get_object_or_404(Car, id=car_id)

    if request.method == "POST":
        form = BookingForm(request.POST)
        if form.is_valid():
            booking = form.save(commit=False)
            booking.car = car
            booking.save()
            return redirect('payment', booking_id=booking.id)
    else:
        form = BookingForm()

    return render(request, 'booking_form.html', {'form': form, 'car': car})

from django.shortcuts import render, redirect, get_object_or_404
from .models import Car, Booking

from django.shortcuts import render, redirect, get_object_or_404
from myapp.models import Car, Booking  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏õ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì

from django.urls import reverse
from django.shortcuts import render, redirect, get_object_or_404
from .models import Car, Booking

from django.shortcuts import render

def receipt(request):
    if request.method == "POST":
        pickup_location = request.POST.get('pickup_location', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')
        return_location = request.POST.get('return_location', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')
        first_name = request.POST.get('first_name', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')
        last_name = request.POST.get('last_name', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')
        email = request.POST.get('email', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')
        phone = request.POST.get('phone', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')

        context = {
            'pickup_location': pickup_location,
            'return_location': return_location,
            'first_name': first_name,
            'last_name': last_name,
            'email': email,
            'phone': phone,
        }

        return render(request, 'receipt.html', context)

    return render(request, 'receipt.html', {})





def payment(request, booking_id):
    booking = get_object_or_404(Booking, id=booking_id)
    return render(request, 'payment.html', {'booking': booking})

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö (Logout)
def logout_view(request):
    logout(request)
    messages.success(request, "üëã ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
    return redirect('login')


# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å (Register)
def register(request):
    if request.method == "POST":
        username = request.POST.get("username").strip()
        password1 = request.POST.get("password1").strip()
        password2 = request.POST.get("password2").strip()
        email = request.POST.get("email").strip()
        display_name = request.POST.get("display_name").strip()

        if User.objects.filter(username=username).exists():
            messages.error(request, "‚ö†Ô∏è ‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß!")
            return redirect("register")

        if password1 != password2:
            messages.error(request, "‚ùå ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô!")
            return redirect("register")

        if len(password1) < 6:
            messages.error(request, "üîë ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 6 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£!")
            return redirect("register")

        user = User.objects.create_user(username=username, password=password1, email=email)
        user.first_name = display_name
        user.save()

        # ‚úÖ ‡πÉ‡∏ä‡πâ get_or_create ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
        UserProfile.objects.get_or_create(user=user)

        login(request, user)  # ‚úÖ ‡πÉ‡∏ä‡πâ login(request, user) ‡∏ï‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≥‡∏´‡∏ô‡∏î backend

        messages.success(request, "üéâ ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö üöóüí®")
        return redirect("home")

    return render(request, "myapp/register.html")


# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏ñ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
@login_required
def home(request):
    locations = Location.objects.all()
    print(type(Location))
    cars = Car.objects.all()

    # ‚úÖ ‡∏î‡∏∂‡∏á‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    brands = Car.objects.values_list('brand', flat=True).distinct()

    # üîπ ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á
    brand = request.GET.get('brand')
    if brand:
        cars = cars.filter(brand=brand)

    min_price = request.GET.get('min_price')
    max_price = request.GET.get('max_price')
    if min_price and max_price:
        cars = cars.filter(price_per_day__gte=min_price, price_per_day__lte=max_price)

    seats = request.GET.get('seats')
    if seats:
        cars = cars.filter(seats=seats)

    # üîπ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô
    pickup_date = request.GET.get('pickup_date')
    return_date = request.GET.get('return_date')
    total_days = 1  # ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô = 1 ‡∏ß‡∏±‡∏ô (‡∏Å‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î)

    if pickup_date and return_date:
        try:
            pickup_date = datetime.strptime(pickup_date, "%Y-%m-%dT%H:%M")
            return_date = datetime.strptime(return_date, "%Y-%m-%dT%H:%M")
            total_days = max((return_date - pickup_date).days, 1)  # ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ 1 ‡∏ß‡∏±‡∏ô
        except ValueError:
            pass  # ‡∏ñ‡πâ‡∏≤‡∏Ñ‡πà‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì

    # üîπ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÉ‡∏´‡πâ `cars`
    for car in cars:
        car.total_price = car.price_per_day * total_days  # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°

    return render(request, "myapp/home.html", {
        'cars': cars,
        'brands': brands,  
        'seat_options': [2, 4, 7, 10],
        'total_days': total_days,
        'locations': locations,  # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
        "google_maps_api_key": settings.GOOGLE_MAPS_API_KEY
    })


   
# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏ñ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô)
@login_required
def add_car(request):
    if not is_admin(request.user):
        print(request.POST)
        messages.error(request, "‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏ñ!")
        return redirect('home')

    if request.method == 'POST':
        form = CarForm(request.POST, request.FILES)
        if form.is_valid():
            form.save()
            messages.success(request, "üöó ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏ñ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
            return redirect(reverse('home'))
    else:
        form = CarForm()

    return render(request, 'myapp/add_car.html', {'form': form})


# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡∏£‡∏ñ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô)
@login_required
def delete_car(request, car_id):
    car = get_object_or_404(Car, id=car_id)

    if not is_admin(request.user):
        messages.error(request, "‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏•‡∏ö‡∏£‡∏ñ!")
        return redirect('home')

    if request.method == 'POST':
        print(request.POST)
        car.delete()
        messages.success(request, "üöó ‡∏•‡∏ö‡∏£‡∏ñ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
        return redirect(reverse('admin_panel'))

    return render(request, 'myapp/delete_car.html', {'car': car})


# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô)
@login_required
def edit_car(request, car_id):
    car = get_object_or_404(Car, id=car_id)

    if not is_admin(request.user):
        messages.error(request, "‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏ñ!")
        return redirect('home')

    if request.method == 'POST':
        print(request.POST)
        form = CarForm(request.POST, request.FILES, instance=car)
        if form.is_valid():
            form.save()
            messages.success(request, "‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
            return redirect(reverse('admin_panel'))
    else:
        form = CarForm(instance=car)

    return render(request, 'myapp/edit_car.html', {'form': form, 'car': car})


# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏≠‡∏á‡∏£‡∏ñ
@login_required
def purchase(request, car_id):
    car = get_object_or_404(Car, id=car_id)

    if request.method == "POST":
        rental_duration = request.POST.get("rental_duration")

        try:
            rental_days = max(float(rental_duration), 0.5)  # ‚úÖ ‡πÉ‡∏ä‡πâ float() ‡πÅ‡∏ó‡∏ô isdigit() ‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ 0.5 ‡∏ß‡∏±‡∏ô
            messages.success(request, f"‚úÖ ‡∏à‡∏≠‡∏á‡∏£‡∏ñ {car.name} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ {rental_days} ‡∏ß‡∏±‡∏ô! üéâ")
            return redirect("home")
        except ValueError:
            messages.error(request, "‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ä‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!")

    return render(request, "myapp/purchase.html", {"car": car})



# ‚úÖ ‡πÅ‡∏ú‡∏á‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
@login_required
def admin_panel(request):
    if not is_admin(request.user):
        messages.error(request, "‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ!")
        return redirect('home')

    cars = Car.objects.all()
    users = UserProfile.objects.all()
    return render(request, 'myapp/admin_panel.html', {'cars': cars, 'users': users})


# ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô)
@login_required
def edit_user(request, user_id):
    user = get_object_or_404(UserProfile, id=user_id)

    if not is_admin(request.user):
        messages.error(request, "‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å!")
        return redirect('home')

    if request.method == 'POST':
        print(request.POST)
        form = UserForm(request.POST, instance=user)
        if form.is_valid():
            form.save()
            messages.success(request, "‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
            return redirect(reverse('admin_panel'))
    else:
        form = UserForm(instance=user)

    return render(request, 'myapp/edit_user.html', {'form': form, 'user': user})


# ‚úÖ ‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô)
@login_required
def delete_user(request, user_id):
    user = get_object_or_404(UserProfile, id=user_id)

    if not is_admin(request.user):
        messages.error(request, "‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å!")
        return redirect("home")

    if request.user == user.user:
        messages.error(request, "‚ö†Ô∏è ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÑ‡∏î‡πâ!")
        return redirect("admin_panel")

    if request.method == "POST":
        user.delete()
        messages.success(request, "üóëÔ∏è ‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
        return redirect("admin_panel")

    return render(request, "myapp/delete_user.html", {"user": user})


@login_required
def car_rental_view(request):
    locations = [
        {"name": "‡∏™‡∏ô‡∏≤‡∏°‡∏ö‡∏¥‡∏ô‡∏†‡∏π‡πÄ‡∏Å‡πá‡∏ï", "latitude": 8.1132, "longitude": 98.3165},
        {"name": "‡∏ï‡∏±‡∏ß‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏†‡∏π‡πÄ‡∏Å‡πá‡∏ï", "latitude": 7.8804, "longitude": 98.3923},
        {"name": "‡∏´‡∏≤‡∏î‡∏Å‡∏∞‡∏ï‡∏∞", "latitude": 7.8168, "longitude": 98.3031},
        {"name": "‡∏´‡∏≤‡∏î‡∏Å‡∏°‡∏•‡∏≤", "latitude": 7.9527, "longitude": 98.2827},
        {"name": "‡∏´‡∏≤‡∏î‡∏™‡∏∏‡∏£‡∏¥‡∏ô‡∏ó‡∏£‡πå", "latitude": 7.9813, "longitude": 98.2806},
        {"name": "‡∏´‡∏≤‡∏î‡∏Å‡∏∞‡∏£‡∏ô", "latitude": 7.8442, "longitude": 98.2933},
        {"name": "‡∏´‡∏≤‡∏î‡πÉ‡∏ô‡∏´‡∏≤‡∏ô", "latitude": 7.7750, "longitude": 98.3056},
        {"name": "‡∏´‡∏≤‡∏î‡πÉ‡∏ô‡∏ó‡∏≠‡∏ô", "latitude": 8.0581, "longitude": 98.2752},
        {"name": "‡∏´‡∏≤‡∏î‡πÉ‡∏ô‡∏¢‡∏≤‡∏á", "latitude": 8.1100, "longitude": 98.3063},
        {"name": "‡∏õ‡πà‡∏≤‡∏ï‡∏≠‡∏á", "latitude": 7.8965, "longitude": 98.2982},
        {"name": "‡∏´‡∏≤‡∏î‡∏£‡∏≤‡πÑ‡∏ß‡∏¢‡πå", "latitude": 7.7766, "longitude": 98.3285},
        {"name": "‡πÄ‡∏ä‡∏¥‡∏á‡πÄ‡∏•‡∏•‡∏≤‡∏Å‡∏π‡∏ô‡πà‡∏≤", "latitude": 8.0088, "longitude": 98.2966},
    ]

    context = {
        "locations": locations,
        "google_maps_api_key": settings.GOOGLE_MAPS_API_KEY,
    }
    
    print("üìå Context ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÑ‡∏õ:", context)  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á Template
    
    return render(request, "myapp/car_rental.html", context)

# ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏£‡∏ñ
def car_detail(request, car_id):
    car = get_object_or_404(Car, id=car_id)

    pickup_date = request.GET.get('pickup_date', request.session.get('pickup_date'))
    return_date = request.GET.get('return_date', request.session.get('return_date'))

    total_price = None
    if pickup_date and return_date:
        try:
            # ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô str ‡πÄ‡∏õ‡πá‡∏ô datetime
            pickup_date_obj = datetime.strptime(pickup_date, "%Y-%m-%dT%H:%M")
            return_date_obj = datetime.strptime(return_date, "%Y-%m-%dT%H:%M")

            rental_days = (return_date_obj - pickup_date_obj).days
            total_price = rental_days * car.price_per_day  # total_price ‡πÄ‡∏õ‡πá‡∏ô Decimal

            # ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á Decimal ‡πÄ‡∏õ‡πá‡∏ô float ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô session
            request.session['pickup_date'] = pickup_date
            request.session['return_date'] = return_date
            request.session['total_price'] = float(total_price)  # üîπ Fix JSON error
        except ValueError as e:
            print(f"‚ùå Error: {e}")  # Debugging

    return render(request, 'myapp/car_detail.html', {
        'car': car,
        'pickup_date': pickup_date,
        'return_date': return_date,
        'total_price': total_price
    })

# ‡∏´‡∏ô‡πâ‡∏≤‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à)
def payment_success(request):
    return render(request, 'myapp/payment_success.html')

def confirm_booking(request):
    if request.method == 'POST':
        # ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á ‡πÄ‡∏ä‡πà‡∏ô ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
        return redirect('receipt')  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÑ‡∏õ
    return redirect('home')  # ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏õ‡∏¥‡∏î URL ‡∏ï‡∏£‡∏á ‡πÜ

def rental_form(request, car_id):
    car = get_object_or_404(Car, id=car_id)  # ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡∏ñ‡∏à‡∏≤‡∏Å database
    context = {
        "car": car,
        "pickup_location": "‡∏™‡∏ô‡∏≤‡∏°‡∏ö‡∏¥‡∏ô‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà",
        "pickup_date": "07/02/2025",
        "pickup_time": "10:00 ‡∏ô.",
        "dropoff_location": "‡∏™‡∏ô‡∏≤‡∏°‡∏ö‡∏¥‡∏ô‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà",
        "dropoff_date": "09/02/2025",
        "dropoff_time": "10:00 ‡∏ô.",
        "rental_shop_name": "Local",
        "rental_shop_code": "C00325",
    }
    return render(request, "myapp/rental_form.html", context)


def store_rental_data(request):
    request.session['pickup_date'] = request.GET.get('pickup_date')
    request.session['return_date'] = request.GET.get('return_date')
    request.session['pickup_location'] = request.GET.get('pickup_location')
    request.session['total_price'] = request.GET.get('total_price')

def confirm_rental(request):
    if request.method == "POST":
        # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏•‡∏á session
        request.session['rental_data'] = {
            'first_name': request.POST.get('first_name'),
            'last_name': request.POST.get('last_name'),
            'car_name': request.POST.get('car_name'),
            'pickup_date': request.POST.get('pickup_date'),
            'return_date': request.POST.get('return_date'),
            'total_price': request.POST.get('total_price'),
        }
        return redirect('receipt')  # ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à

    return render(request, "confirm.html")

def receipt_page(request, booking_id):
    booking = get_object_or_404(Booking, id=booking_id)
    
    context = {
        "booking_id": booking.id,
        "car_name": booking.car.name if booking.car else "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏ñ",
        "first_name": booking.first_name,
        "last_name": booking.last_name,
        "email": booking.email,
        "phone": booking.phone,
        "pickup_location": booking.pickup_location,
        "return_location": booking.return_location,
        "pickup_date": booking.pickup_date,
        "return_date": booking.return_date,
        "total_price": booking.total_price,
    }
    return render(request, "myapp/receipt.html", context)